!!!SOS!!!πληθος ορισματων, ορισμα αν υπαρχει και αν ειναι αρχειο ή directory για εξεταστικη


---Ασκηση 1 (ΕΝΤΟΛΕΣ: ps,kill)

ps -ux : Ή γενικοτερα ps τυπωνει σε στυλ ls τις τρεχουσες διεργασιες.(Επισης ps -ef, ps -al, ps -aldef,ps -auxw κτλπ.)
kill   : Στελνει σηματα σε διεργασιες.Συντασεται ετσι kill -9 <PID>. Πιο χρησιμο σηματα: 
		15 (TERM): Λέμε στην διεργασία να τερματίσει. Η διεργασία θα τερματίσει αν το θέλει.
		9  (KILL): Τερματίζουμε βίαια την διεργασία. Η διεργασία θα τερματίσει είτε το θέλει είτε όχι.
		19 (STOP): Λέμε στην διεργασία (ουσιαστικά στο λειτουργικό) να μπει σε STOP mode. H διεργασία σταματά να εκτελείται, αλλά δεν τερματίζεται.
		18 (CONT): Λέμε στην διεργασία που ήταν σε STOP mode να συνεχίσει να εκτελείται.

---Ασκηση 2 (ΕΝΤΟΛΕΣ: CTRL+Z,CTRL+C,jobs,bg,fg,disown)

CTRL+Z :Στελνει στην τρεχουσα διεργασια το σημα STOP.Γραφεται ως ^Z στο τερματικο.
CTRL+C :Στέλνει στην τρέχουσα διεργασία το σήμα TERM.Γραφεται ως ^C στο τερματικο.
jobs   :Εμφανιζει όλα τα jobs του τρέχοντος shell και το status του καθενός.Ένα job είναι μια διεργασία που εκτελέστηκε από το shell και σταμάτησε 
	(ή μπήκε στο παρασκήνιο). Πατώντας ^Ζ η τρέχουσα διεργασία γίνεται job.Τα jobs έχουν την δική τους αρίθμηση από το shell σε μορφη [1],[2] κτλπ.
	ΣΗΜΕΙΩΣΗ:To & στο τέλος μιας εντολής λέει στο shell να εκτελέσει την εντολή, και να την βάλει να εκτελείται στο παρασκήνιο (δηλαδή η εντολή δεν θα μπορεί να διαβάσει
	από το τερματικό αν το θελήσει). Το τερματικό παραμένει στον έλεγχο του shell.
bg %n  :Στελνει το σημα CONT στην διεργασια με αριθμο n και την βαζει να εκτελειται στο παρασκηνιο
fg %n  :Στελνει το σημα CONT στην διεργασια με αριθμο n και την βαζει να εκτελειται στο ΠΡΟΣΚΗΝΙΟ ,δηλαδη της δινει τον ελεγχο του τερματικου.
disown %n :H εντολή disown αποδεσμεύει ένα job από το τρέχον shell. H διεργασία όμως παραμένει να τρέχει.Εάν δεν θέλουμε ένα job να μην τερματιστεί με την έξοδο από το shell,
	   τότε πρέπει να δώσουμε την εντολή disown

---Ασκηση 3 (ΕΝΤΟΛΕΣ: <,<<,>>,>,0,1,2(stdin,stdout,stderr αντιστοιχα,CTRL+D)

<,>    :Για κάθε διεργασία (κατά την δημιουργία της) μπορούμε να ορίσουμε εμείς σε τι θα αντιστοιχούν τα I/O streams. Για το ορισμό αυτό χρησιμοποιούμε τα σύμβολα: >, <, >>, <<.
	H συνταξη ειναι : Εντολη > file. Το >> κανει append τα δεδομενα στο αρχειο αντι να τα αντικαταστησει οπως κανει το >.Στο << SOMETHING το θα περιμενει να πληκτρολογησουμε
	δεδομενα μεχρι να πληκτρολογησουμε την γραμμη SOMETHING

CTRL+D :Για εντολες που διαβαζουν απο το τερματικο πχ. wc χωρις ορισμα τοτε το CTRL+D εκφραζει το End-Of-Line και η εντολη σταματαει να διαβαζει εμφανιζοντας το αποτελεσμα της.

---Ασκηση 4 (ΕΝΤΟΛΕΣ: |)

|      :Με τον χαρακτήρα | (διασωλήνωση - pipe) μπορούμε να δημιουργήσουμε μια «σωλήνα» (pipe) μεταξύ 2 διεργασιών.Με την εντολή: ls | wc δημιουργούμε 2 διεργασίες. 
	Η πρώτη θα έχει ως stdout ένα αρχείο pipe. H 2 η θα έχει ως stdin το ίδιο αρχείο. Έτσι ότι γράψει η 1η διεργασία στο stdout θα πάει στο stdin της 2ης.


---Ασκηση 5 (ΕΝΤΟΛΕΣ: sort,tr)

1.ls -l | sort -nr

2.cat /etc/passwd | tr [:lower:] [:upper:]

3.ls -a | egrep '^d' | tr [:lower:] [:upper:] | sort -r

4.ls -all | egrep -c '^d'

5.cat ~asidirop/public/OSIntro/Lab4_files/passwd | wc -l

6.cat ~asidirop/public/OSIntro/Lab4_files/passwd | egrep '^a[^:]*p:' | wc -l

7.ps -ux | tail -1 (ισως και οχι 100% σωστο αλλα προς το παρον βγαζει σωστο αποτελεσμα)

8.ls -l | egrep '^-' | sort | tail -1

---Ασκηση 6

Κανεις ./myscript

#!/bin/bash

echo 'This directory consists of:'
ls -l

echo 'The number of files:'
ls -l | egrep '^-' | wc -l

echo 'The number of directories'
ls -l | egrep '^d' | wc -l

echo 'The number of hidden files'
ls -al | egrep ' [.]' | egrep '^-' | wc -l 

echo 'The number of hidden directories'
ls -al | egrep ' [.]' | egrep '^d' | wc -l

---Ασκηση 7

"$$ $PWD" = PID pwd
'$$ $PWD' = $$ $PWD
$$ PWD = PID pwd
\$\$ = $$
'"$$ $PWD"' = "$$ $PWD"
"'$$' $PWD" = 'PID' pwd

Τα ανάποδα εισαγωγικά (`) προκαλούν εκτέλεση της εντολής που περικλείουν. Οι εντολές που περικλείονται στα (`) θα εκτελεστούν, όμως η κανονική τους έξοδος
δεν θα εμφανιστεί στην οθόνη, θα δεσμευτεί και τα επιστραφεί στην μεταβλητή (εφόσον τα (`) χρησιμοποιήθηκαν σε εκχώρηση.

---Προ-δηλωμένες μεταβλητές:

$1,$2,…$9 : οι τιμές των 9 πρώτων ορισμάτων που έδωσε ο χρήστης σε ένα script
$# : το πλήθος των ορισμάτων που έδωσε ο χρήστης σε ένα script
$*, $@: Οι πίνακες με τα ορίσματα που έδωσε ο χρήστης σε ένα script
$$ : Το ProcessID (PID) του τρέχοντος shell



